/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "sample-controller-demo/pkg/apis/crd.example.com/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InferenceLister helps list Inferences.
// All objects returned here must be treated as read-only.
type InferenceLister interface {
	// List lists all Inferences in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Inference, err error)
	// Inferences returns an object that can list and get Inferences.
	Inferences(namespace string) InferenceNamespaceLister
	InferenceListerExpansion
}

// inferenceLister implements the InferenceLister interface.
type inferenceLister struct {
	indexer cache.Indexer
}

// NewInferenceLister returns a new InferenceLister.
func NewInferenceLister(indexer cache.Indexer) InferenceLister {
	return &inferenceLister{indexer: indexer}
}

// List lists all Inferences in the indexer.
func (s *inferenceLister) List(selector labels.Selector) (ret []*v1.Inference, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Inference))
	})
	return ret, err
}

// Inferences returns an object that can list and get Inferences.
func (s *inferenceLister) Inferences(namespace string) InferenceNamespaceLister {
	return inferenceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InferenceNamespaceLister helps list and get Inferences.
// All objects returned here must be treated as read-only.
type InferenceNamespaceLister interface {
	// List lists all Inferences in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Inference, err error)
	// Get retrieves the Inference from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Inference, error)
	InferenceNamespaceListerExpansion
}

// inferenceNamespaceLister implements the InferenceNamespaceLister
// interface.
type inferenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Inferences in the indexer for a given namespace.
func (s inferenceNamespaceLister) List(selector labels.Selector) (ret []*v1.Inference, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Inference))
	})
	return ret, err
}

// Get retrieves the Inference from the indexer for a given namespace and name.
func (s inferenceNamespaceLister) Get(name string) (*v1.Inference, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("inference"), name)
	}
	return obj.(*v1.Inference), nil
}
